<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PlantUMLEditor"
    xmlns:models="clr-namespace:PlantUMLEditor.Models"
    xmlns:localControls="clr-namespace:PlantUMLEditor.Controls"
        xmlns:b="http://schemas.microsoft.com/xaml/behaviors" x:Class="PlantUMLEditor.MainWindow"

        mc:Ignorable="d"
        Title="Aaron's Plant UML Editor" Height="850" Width="1000"

    xmlns:System="clr-namespace:System;assembly=System.Runtime" Icon="/Images/uml.png">
    <Window.Resources>
        <ContextMenu x:Key="FolderMenu">
            <MenuItem Header="New Class Diagram" Command="{Binding DataContext.CreateNewClassDiagram, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}}" ></MenuItem>
            <MenuItem Header="New Sequence Diagram" Command="{Binding DataContext.CreateNewSequenceDiagram , RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}}" ></MenuItem>
            <Separator></Separator>

            <MenuItem Header="New Folder" Command="{Binding NewFolderCommand}"></MenuItem>
            <MenuItem Header="Rename" Command="{Binding StartRenameCommand}"></MenuItem>
        </ContextMenu>
        <ContextMenu x:Key="FileMenu">
            <MenuItem Header="Rename" Command="{Binding StartRenameCommand}"></MenuItem>
        </ContextMenu>
        <System:Double x:Key="AutoCompleteOpacity">0.8</System:Double>
        <DataTemplate x:Key="TabControlItemTemplate2">
            <Grid Height="{Binding ActualHeight, ElementName=Tabs}" Visibility="{Binding Visible}">
                <Border BorderThickness="2" CornerRadius="4">

                    <Border.Style>
                        <Style TargetType="Border">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsDirty}" Value="true">
                                    <DataTrigger.Setters>
                                        <Setter   Property="BorderBrush" Value="Red">
                                        </Setter>
                                    </DataTrigger.Setters>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsDirty}" Value="false">
                                    <DataTrigger.Setters>
                                        <Setter   Property="BorderBrush" Value="Green">
                                        </Setter>
                                    </DataTrigger.Setters>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                            <ColumnDefinition Width="*"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>

                            <RowDefinition Height="*"></RowDefinition>
                            <RowDefinition Height="5">
                            </RowDefinition>
                            <RowDefinition Height="50" ></RowDefinition>
                        </Grid.RowDefinitions>
                        <Image Source="{Binding Children[1].LineNumbers, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}}" ></Image>
                        <localControls:MyTextBox Grid.Column="1" IsInactiveSelectionHighlightEnabled="True"
                                              UndoLimit="100" ScrollViewer.VerticalScrollBarVisibility="Visible" ScrollViewer.HorizontalScrollBarVisibility="Visible"
                                            DataContext="{Binding}"   HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
 Style="{DynamicResource TextBoxStyle1}" x:Name="Editor"
                            AcceptsReturn="True"  AcceptsTab="True"
                               FontFamily="Calibri" FontSize="14">
                            <localControls:MyTextBox.PopupControl>
                                <Popup>

                                    <Grid x:Name="AutoCompleteGrid">
                                        <Grid.RowDefinitions>

                                            <RowDefinition Height="Auto"></RowDefinition>
                                            <RowDefinition Height="Auto"></RowDefinition>
                                            <RowDefinition Height="Auto"></RowDefinition>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                                        </Grid.ColumnDefinitions>

                                        <ListBox x:Name="AutoCompleteBox" Grid.Row="2" Grid.ColumnSpan="2"
                             MaxHeight="100"
                           ItemsSource="{Binding SortedMatchingAutoCompletes}">
                                            <ListBox.ItemTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding}"></TextBlock>
                                                </DataTemplate>
                                            </ListBox.ItemTemplate>
                                        </ListBox>
                                    </Grid>
                                </Popup>
                            </localControls:MyTextBox.PopupControl>
                        </localControls:MyTextBox>

                        <GridSplitter Grid.Row="1" Grid.Column="1" ShowsPreview="True" ResizeDirection="Rows"  HorizontalAlignment="Stretch"  ></GridSplitter>
                        <Border Grid.Row="2" Grid.Column="1" BorderThickness="1" BorderBrush="Black" Width="{Binding Width, ElementName=Editor}">

                            <Grid Width="{Binding ActualWidth, ElementName=Editor}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="200" ></ColumnDefinition>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="200" ></ColumnDefinition>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="*"></ColumnDefinition>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"></RowDefinition>
                                    <RowDefinition></RowDefinition>
                                </Grid.RowDefinitions>

                                <!--<Button Grid.Column="1">
                                <Button.Content>Close</Button.Content>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Click">
                                        <b:ChangePropertyAction TargetName="FindReplace" PropertyName="IsOpen" Value="false"></b:ChangePropertyAction>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </Button>-->
                                <TextBox Grid.Row="0" Margin="{DynamicResource TabHeaderMargin}"  Text="{Binding FindText, Mode=TwoWay, ElementName=Editor}">
                                    <b:Interaction.Triggers>
                                        <b:KeyTrigger Key="Return">
                                            <b:InvokeCommandAction Command="{Binding FindCommand, ElementName=Editor, UpdateSourceTrigger=PropertyChanged}"></b:InvokeCommandAction>
                                        </b:KeyTrigger>
                                    </b:Interaction.Triggers>
                                </TextBox>
                                <TextBox Grid.Row="0"  Margin="{DynamicResource TabHeaderMargin}"   Grid.Column="2" Text="{Binding ReplaceText, Mode=TwoWay, ElementName=Editor, UpdateSourceTrigger=PropertyChanged}"></TextBox>
                                <Button Grid.Column="1" Margin="{DynamicResource TabHeaderMargin}" Command="{Binding FindCommand, ElementName=Editor}" Content="Find" ></Button>
                                <Button Grid.Column="3"  Margin="{DynamicResource TabHeaderMargin}" Command="{Binding ReplaceCommand, ElementName=Editor}" Content="Replace"  ></Button>
                                <Button Grid.Column="4" Margin="{DynamicResource TabHeaderMargin}" Command="{Binding ClearCommand, ElementName=Editor}" Content="Clear"  ></Button>

                                <DataGrid CanUserAddRows="false"  ItemsSource="{Binding FindResults, ElementName=Editor}" Grid.Row="1" Grid.ColumnSpan="6" MaxHeight="300"
                                 AutoGenerateColumns="False"     SelectedItem="{Binding SelectedFindResult, Mode=TwoWay, ElementName=Editor}">
                                    <DataGrid.Columns>
                                        <DataGridTextColumn  Header="Line"  Binding="{Binding LineNumber}" ></DataGridTextColumn>
                                        <DataGridTextColumn Header="Match" Binding="{Binding Line}" ></DataGridTextColumn>
                                        <DataGridTextColumn Header="Replace" Binding="{Binding ReplacePreview}" ></DataGridTextColumn>
                                    </DataGrid.Columns>
                                </DataGrid>
                            </Grid>
                        </Border>
                    </Grid>
                </Border>
            </Grid>
        </DataTemplate>

        <HierarchicalDataTemplate  DataType="{x:Type  models:TreeViewModel}" ItemsSource="{Binding Children}">

            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto">
                    </ColumnDefinition>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="MouseLeftButtonDown">
                        <b:CallMethodAction MethodName="TreeItemClicked" TargetObject="{Binding Path=DataContext,  RelativeSource={RelativeSource FindAncestor,
AncestorType={x:Type TreeView}}}"></b:CallMethodAction>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                <Image Source="{Binding Icon}" Width="15" Margin="1,0,5,0">
                </Image>
                <TextBox x:Name="rename" Text="{Binding Rename, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <b:Interaction.Triggers>
                        <b:KeyTrigger Key="Return" ActiveOnFocus="True">

                            <b:InvokeCommandAction  Command="{Binding  DoRenameCommand}"></b:InvokeCommandAction>
                        </b:KeyTrigger>

                        <b:KeyTrigger Key="Esc" ActiveOnFocus="True">
                            <b:ChangePropertyAction TargetObject="{Binding}" PropertyName="IsRenaming" Value="false"></b:ChangePropertyAction>
                        </b:KeyTrigger>
                    </b:Interaction.Triggers>
                </TextBox>
                <TextBlock x:Name="txt" Grid.Column="1" Text="{Binding Name}" FontWeight="Bold">
                </TextBlock>
            </Grid>
            <HierarchicalDataTemplate.Triggers>
                <DataTrigger Value="true">
                    <DataTrigger.Binding>
                        <Binding  Path="IsRenaming"></Binding>
                    </DataTrigger.Binding>
                    <DataTrigger.Setters>
                        <Setter Property="Visibility"  TargetName="rename" Value="Visible">
                        </Setter>
                        <Setter Property="Visibility"  TargetName="txt" Value="Collapsed">
                        </Setter>
                    </DataTrigger.Setters>
                </DataTrigger>
                <DataTrigger Value="false">
                    <DataTrigger.Binding>
                        <Binding  Path="IsRenaming"></Binding>
                    </DataTrigger.Binding>
                    <DataTrigger.Setters>
                        <Setter Property="Visibility"  TargetName="rename" Value="Collapsed">
                        </Setter>
                        <Setter Property="Visibility"  TargetName="txt" Value="Visible">
                        </Setter>
                    </DataTrigger.Setters>
                </DataTrigger>
            </HierarchicalDataTemplate.Triggers>
        </HierarchicalDataTemplate>
        <Thickness x:Key="TabHeaderMargin">5,2,10,2</Thickness>
        <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3" />
        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA" />
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5" />
        <Style x:Key="TextBoxStyle1" TargetType="{x:Type localControls:MyTextBox}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="AllowDrop" Value="true" />
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type localControls:MyTextBox}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Visible" VerticalScrollBarVisibility="Visible" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.56" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}" />
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                        <Condition Property="IsSelectionActive" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="ListBorder" Color="#828790" />
        <Style x:Key="TreeViewStyle1" TargetType="{x:Type TreeView}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
            <Setter Property="BorderBrush" Value="{StaticResource ListBorder}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.PanningMode" Value="Both" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeView}">
                        <Border x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                            <ScrollViewer x:Name="_tv_scrollviewer_" Background="{TemplateBinding Background}" CanContentScroll="false" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            </Trigger>
                            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                                <Setter Property="CanContentScroll" TargetName="_tv_scrollviewer_" Value="true" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                    <Setter Property="ItemsPanel">
                        <Setter.Value>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel />
                            </ItemsPanelTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF1CC4F7" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB" />
        <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z" />
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False" />
            <Setter Property="Width" Value="16" />
            <Setter Property="Height" Value="16" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                            <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterY="3" CenterX="3" />
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterY="3" CenterX="3" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True" />
                                    <Condition Property="IsChecked" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TreeViewItemFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style   TargetType="{x:Type TreeViewItem}">
            <Setter Property="HorizontalContentAlignment" Value="Stretch"></Setter>
            <Setter Property="IsExpanded" Value="True"></Setter>
            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}" />

            <Setter Property="Background" Value="Transparent" />
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="Padding" Value="1,0,0,0" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid Margin="-5,0,0,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}" />
                            <Border x:Name="Bd" CornerRadius="10" HorizontalAlignment="Stretch"  Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <ContentPresenter Margin="2,2,2,2" x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Visibility" TargetName="Expander" Value="Hidden" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter Property="Background" TargetName="Bd" Value="#FF800080" />
                                <Setter Property="Foreground" Value="White" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true" />
                                    <Condition Property="IsSelectionActive" Value="false" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsFile}" Value="false">
                    <Setter Property="ContextMenu" Value="{StaticResource FolderMenu}">
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsFile}" Value="true">
                    <Setter Property="ContextMenu" Value="{StaticResource FileMenu}">
                    </Setter>
                </DataTrigger>

                <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                    <Setter Property="ItemsPanel">
                        <Setter.Value>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel />
                            </ItemsPanelTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD" />
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1" />
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6" />
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B" />
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4" />
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5" />
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383" />
        <Style TargetType="Button">
            <Setter Property="Padding" Value="5,2,5,2"></Setter>
            <Setter Property="BorderThickness" Value="2"></Setter>
            <Setter Property="BorderBrush"  Value="#FF500050"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate  TargetType="{x:Type ButtonBase}">
                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="5" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="Button.IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}" />
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}" />
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}" />
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}" />
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF" />
        <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC" />
    </Window.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />

            <RowDefinition Height="100"></RowDefinition>
        </Grid.RowDefinitions>
        <Ribbon Grid.ColumnSpan="3">
            <RibbonTab Header="Home">
                <RibbonGroup>
                    <RibbonButton Label="Load Folder" Command="{Binding OpenDirectoryCommand}" SmallImageSource="/Images/OpenFolder_16x.png" />
                    <RibbonButton Label="Save All"  Command="{Binding SaveAllCommand}" SmallImageSource="/Images/SaveAll_16x.png" />
                    <RibbonButton Label="Scan" Command="{Binding ScanAllFiles}"></RibbonButton>
                </RibbonGroup>
                <RibbonGroup>
                    <RibbonButton Label="New Class Diagram" Command="{Binding CreateNewClassDiagram}" />
                    <RibbonButton Label="New Sequence Diagram" Command="{Binding CreateNewSequenceDiagram}" />
                </RibbonGroup>
            </RibbonTab>
        </Ribbon>
        <TreeView Style="{DynamicResource TreeViewStyle1}"  Grid.Row="1" Grid.RowSpan="1"  ItemsSource="{Binding Folder.Children}">
        </TreeView>
        <GridSplitter Grid.Row="2" Height="5" ShowsPreview="True" HorizontalAlignment="Stretch" ></GridSplitter>
        <ListBox Grid.Row="3" Grid.RowSpan="2" ItemsSource="{Binding DataTypes}">
        </ListBox>
        <GridSplitter   Grid.RowSpan="4"  HorizontalAlignment="Center"
              VerticalAlignment="Stretch" Grid.Row="1" Grid.Column="1" ShowsPreview="True" Width="5" />
        <Grid Grid.Row="1" Grid.Column="2">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
            </Grid.RowDefinitions>

            <ItemsControl ItemsSource="{Binding OpenDocuments}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>

                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Border BorderThickness="2" Margin="2,2,2,0" CornerRadius="4">
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsDirty}" Value="true">
                                            <DataTrigger.Setters>
                                                <Setter   Property="BorderBrush" Value="Red">
                                                </Setter>
                                            </DataTrigger.Setters>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsDirty}" Value="false">
                                            <DataTrigger.Setters>
                                                <Setter   Property="BorderBrush" Value="Green">
                                                </Setter>
                                            </DataTrigger.Setters>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                            <Grid IsHitTestVisible="True">
                                <Grid.Style>
                                    <Style TargetType="Grid">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Visible}" Value="0">
                                                <Setter Property="Background"  Value="#FF800080"></Setter>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>

                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="Auto" ></ColumnDefinition>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                </Grid.ColumnDefinitions>

                                <Button Command="{Binding DataContext.SelectDocumentCommand, ElementName=Tabs}" CommandParameter="{Binding}"  FontWeight="ExtraBold" VerticalAlignment="Center"   Content="{Binding Name}" Margin="{DynamicResource TabHeaderMargin}"></Button>
                                <Button ToolTip="Save"  Margin="{DynamicResource TabHeaderMargin}" Grid.Column="1" CommandParameter="{Binding}" Command="{Binding Path=DataContext.SaveCommand, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}">
                                    <Button.Content>
                                        <Grid>
                                            <Image Source="/Images/Save_16x.png"></Image>
                                        </Grid>
                                    </Button.Content>
                                </Button>
                                <Button ToolTip="Save and Close"  Margin="{DynamicResource TabHeaderMargin}" Grid.Column="2" CommandParameter="{Binding}" Command="{Binding Path=DataContext.CloseDocumentAndSave, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}">
                                    <Button.Content>
                                        <Grid>
                                            <Image Source="/Images/SaveClose_16x.png"></Image>
                                        </Grid>
                                    </Button.Content>
                                </Button>

                                <Button ToolTip="Close without saving"  Margin="{DynamicResource TabHeaderMargin}" Grid.Column="3" CommandParameter="{Binding}" Command="{Binding Path=DataContext.CloseDocument, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}">
                                    <Button.Content>
                                        <Grid>
                                            <Image Source="/Images/Close_8x_16x.png" ></Image>
                                        </Grid>
                                    </Button.Content>
                                </Button>
                                <Button  ToolTip="Preview" Margin="{DynamicResource TabHeaderMargin}" Grid.Column="4"  Command="{Binding  ShowPreviewCommand}">
                                    <Button.Content>
                                        <Grid>
                                            <Image Source="/Images/PreviewTransition_16x.png" ></Image>
                                        </Grid>
                                    </Button.Content>
                                </Button>
                            </Grid>
                        </Border>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <ItemsControl Grid.Row="1" x:Name="Tabs"
                          ItemsSource="{Binding OpenDocuments}"
                          ItemTemplate="{StaticResource TabControlItemTemplate2}">
            </ItemsControl>
        </Grid>
        <GridSplitter Grid.Row="2" ShowsPreview="True" Grid.Column="2" Height="5" ResizeDirection="Rows" HorizontalAlignment="Stretch"></GridSplitter>
        <ListBox Grid.Row="4" Grid.Column="2"  ItemsSource="{Binding Messages}" HorizontalContentAlignment="Stretch" SelectedItem="{Binding SelectedMessage}">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"></ColumnDefinition>
                            <ColumnDefinition Width="50"></ColumnDefinition>
                            <ColumnDefinition Width="200"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{Binding Text}" Grid.Column="0" Margin="10,5,10,5" ></TextBlock>
                        <TextBlock Text="{Binding LineNumber}" Grid.Column="1" Margin="10,5,10,5"></TextBlock>
                        <Button x:Name="createMissingMethod" Command="{Binding CreateMissingMethodCommand}" Margin="10,5,10,5" CommandParameter="{Binding}"
                                Content="Add Method To Class" Grid.Column="2"></Button>
                    </Grid>

                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding MissingMethod}" Value="false">
                            <DataTrigger.Setters>
                                <Setter TargetName="createMissingMethod" Property="Visibility" Value="Collapsed"></Setter>
                            </DataTrigger.Setters>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
        <Popup IsOpen="{Binding ConfirmOpen}">

            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition></RowDefinition>
                    <RowDefinition></RowDefinition>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition></ColumnDefinition>
                    <ColumnDefinition></ColumnDefinition>
                </Grid.ColumnDefinitions>
                <TextBlock>You have unsaved changes. Continue closing?</TextBlock>
                <Button Grid.Row="1">
                    <Button.Content>Yes</Button.Content>

                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Click">

                            <b:ChangePropertyAction TargetObject="{Binding}" PropertyName="AllowContinue" Value="true"></b:ChangePropertyAction>
                            <b:ChangePropertyAction TargetObject="{Binding}" PropertyName="ConfirmOpen" Value="false"></b:ChangePropertyAction>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </Button>
                <Button Grid.Row="1" Grid.Column="1">
                    <Button.Content>No</Button.Content>

                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Click">

                            <b:ChangePropertyAction TargetObject="{Binding}" PropertyName="AllowContinue" Value="false"></b:ChangePropertyAction>
                            <b:ChangePropertyAction TargetObject="{Binding}" PropertyName="ConfirmOpen" Value="false"></b:ChangePropertyAction>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </Button>
            </Grid>
        </Popup>
    </Grid>
</Window>