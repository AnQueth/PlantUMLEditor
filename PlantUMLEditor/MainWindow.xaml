<Window
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PlantUMLEditor"
    xmlns:models="clr-namespace:PlantUMLEditor.Models"
    xmlns:localControls="clr-namespace:PlantUMLEditor.Controls"
   xmlns:Behaviors="http://schemas.microsoft.com/xaml/behaviors"
        xmlns:b="http://schemas.microsoft.com/xaml/behaviors" x:Class="PlantUMLEditor.MainWindow"
   

        mc:Ignorable="d"
        Title="Aaron's Plant UML Editor" Height="{Binding UIModel.WindowHeight, Mode=TwoWay, FallbackValue=850}" Width="{Binding UIModel.WindowWidth, Mode=TwoWay, FallbackValue=1000}"
FontFamily="Consolas Code"  Loaded="Window_Loaded"
    Left="{Binding UIModel.WindowLeft, Mode=TwoWay}"
    Top="{Binding UIModel.WindowTop, Mode=TwoWay}"
    xmlns:System="clr-namespace:System;assembly=System.Runtime" Icon="/PlantUMLEditor;component/Images/uml.png">


    <b:Interaction.Triggers>

        <b:EventTrigger EventName="SizeChanged">
            <b:CallMethodAction MethodName="UISizeChanged" TargetObject="{Binding UIModel}"></b:CallMethodAction>

        </b:EventTrigger>

    </b:Interaction.Triggers>

    <Window.Resources>

        <SolidColorBrush x:Key="CustomColor" Color="#FF4D8DEA"></SolidColorBrush>
        <Style TargetType="GridSplitter">
            <Setter Property="Background" Value="DarkGray"></Setter>
        </Style>
        <ContextMenu x:Key="FolderMenu">
            <MenuItem Header="New Class Diagram" Command="{Binding DataContext.CreateNewClassDiagram, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}}" ></MenuItem>
            <MenuItem Header="New Sequence Diagram" Command="{Binding DataContext.CreateNewSequenceDiagram , RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}}" ></MenuItem>
            <MenuItem Header="New Component Diagram" Command="{Binding DataContext.CreateNewComponentDiagram, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}}" ></MenuItem>
            <MenuItem Header="New UML Document" Command="{Binding DataContext.CreateNewUnknownDiagram, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}}" ></MenuItem>
            <MenuItem Header="New JSON UML Document" Command="{Binding DataContext.CreateNewJSONDocumentCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}}" ></MenuItem>
            <MenuItem Header="New Markdown Document" Command="{Binding DataContext.CreateMarkDownDocument, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}}" ></MenuItem>
            <MenuItem Header="New YAML Document" Command="{Binding DataContext.CreateYAMLDocument, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}}" ></MenuItem>

            <Separator></Separator>

            <MenuItem Header="New Folder" Command="{Binding NewFolderCommand}"></MenuItem>
            <MenuItem Header="Rename" Command="{Binding StartRenameCommand}"></MenuItem>
            <Separator>

            </Separator>
            <MenuItem Header="Delete" Command="{Binding DeleteCommand}"></MenuItem>
        </ContextMenu>
        <ContextMenu x:Key="FileMenuUML">

            <MenuItem Header="Rename" Command="{Binding StartRenameCommand}"></MenuItem>
            <Separator></Separator>
            <MenuItem Header="Delete" Command="{Binding DeleteCommand}"></MenuItem>
            <Separator></Separator>
            <MenuItem Header="Generate Image" Command="{Binding DataContext.CreateUMLImage, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}, AncestorLevel=1}}" ></MenuItem>

        </ContextMenu>
        <ContextMenu x:Key="FileMenu">
            <MenuItem Header="Open In Native App" Command="{Binding OpenInNativeCommand}"></MenuItem>
            <MenuItem Header="Rename" Command="{Binding StartRenameCommand}"></MenuItem>
            <Separator></Separator>
            <MenuItem Header="Delete" Command="{Binding DeleteCommand}"></MenuItem>

        </ContextMenu>
        <System:Double x:Key="AutoCompleteOpacity">0.8</System:Double>
        <DataTemplate DataType="{x:Type models:ImageDocumentModel}">

            <Grid Height="{Binding ActualHeight, ElementName=Tabs}" Visibility="{Binding Visible}">
                <Border BorderThickness="3" CornerRadius="2" BorderBrush="Black">
                    <ScrollViewer Grid.Row="2" HorizontalScrollBarVisibility="Auto"  VerticalScrollBarVisibility="Auto" PanningMode="Both">
                        <Behaviors:Interaction.Behaviors>
                            <Behaviors:TranslateZoomRotateBehavior />
                        </Behaviors:Interaction.Behaviors>
                        <localControls:PanAndZoomBorder>
                            <Image Source="{Binding Image}" Stretch="None" ></Image>
                        </localControls:PanAndZoomBorder>
                    </ScrollViewer>
                </Border>
            </Grid>
        </DataTemplate>
        <DataTemplate DataType="{x:Type models:TextDocumentModel}">
            <Grid Height="{Binding ActualHeight, ElementName=Tabs}" Visibility="{Binding Visible}">
                <Border BorderThickness="3" CornerRadius="2">

                    <Border.Style>
                        <Style TargetType="Border">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsDirty}" Value="true">
                                    <DataTrigger.Setters>
                                        <Setter   Property="BorderBrush" Value="#FFAA0000">
                                        </Setter>

                                    </DataTrigger.Setters>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsDirty}" Value="false">
                                    <DataTrigger.Setters>
                                        <Setter   Property="BorderBrush" Value="Green">
                                        </Setter>

                                    </DataTrigger.Setters>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                            <ColumnDefinition Width="*"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>

                            <RowDefinition Height="*"></RowDefinition>
                            <RowDefinition Height="5">
                            </RowDefinition>
                            <RowDefinition Height="50" ></RowDefinition>
                        </Grid.RowDefinitions>
                        <Image Source="{Binding Children[1].LineNumbers, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}}" ></Image>
                        <localControls:MyTextBox Grid.Column="1" IsInactiveSelectionHighlightEnabled="True" AllowDrop="True"
                                              UndoLimit="100" ScrollViewer.VerticalScrollBarVisibility="Visible" ScrollViewer.HorizontalScrollBarVisibility="Visible"
                                            DataContext="{Binding}"   HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
 Style="{DynamicResource TextBoxStyle1}" x:Name="Editor"
                                                 CaretBrush="Green"
                            AcceptsReturn="True"  AcceptsTab="True"
                                                
                                                 FindAllReferencesCommand="{Binding DataContext.FindAllReferencesCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                                                 GotoDefinitionCommand="{Binding DataContext.GotoDefinitionCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                               FontFamily="Cascadia Code" FontSize="{Binding DataContext.EditorFontSize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"  >
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="PreviewDrop">
                                    <b:CallMethodAction MethodName="TextDrop" TargetObject="{Binding DataContext,
                                        RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"></b:CallMethodAction>
                                </b:EventTrigger>
                                <b:EventTrigger EventName="PreviewDragOver">
                                    <b:CallMethodAction MethodName="TextDragOver" TargetObject="{Binding DataContext,
                                        RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"></b:CallMethodAction>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                            <localControls:MyTextBox.PopupControl>
                                <Popup>

                                    <Grid x:Name="AutoCompleteGrid">
                                        <Grid.RowDefinitions>

                                            <RowDefinition Height="Auto"></RowDefinition>
                                            <RowDefinition Height="Auto"></RowDefinition>
                                            <RowDefinition Height="Auto"></RowDefinition>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                                        </Grid.ColumnDefinitions>

                                        <ListBox x:Name="AutoCompleteBox" Grid.Row="2" Grid.ColumnSpan="2"
                             MaxHeight="100"
                           ItemsSource="{Binding SortedMatchingAutoCompletes}">
                                            <ListBox.ItemTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding}"></TextBlock>
                                                </DataTemplate>
                                            </ListBox.ItemTemplate>
                                        </ListBox>
                                    </Grid>
                                </Popup>
                            </localControls:MyTextBox.PopupControl>
                        </localControls:MyTextBox>

                        <GridSplitter Grid.Row="1" Grid.Column="1" ShowsPreview="True" ResizeDirection="Rows"  HorizontalAlignment="Stretch"  ></GridSplitter>

                        <Border Grid.Row="2" Grid.Column="1" BorderThickness="1" BorderBrush="Black"
                                Width="{Binding Width, ElementName=Editor}">

                            <Grid Width="{Binding ActualWidth, ElementName=Editor}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="200" ></ColumnDefinition>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="200" ></ColumnDefinition>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="*"></ColumnDefinition>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"></RowDefinition>
                                    <RowDefinition></RowDefinition>
                                </Grid.RowDefinitions>


                                <TextBox Grid.Row="0" Margin="{DynamicResource TabHeaderMargin}" VerticalContentAlignment="Center"  Text="{Binding FindText, Mode=TwoWay, ElementName=Editor}">
                                    <b:Interaction.Triggers>
                                        <b:KeyTrigger Key="Return">
                                            <b:InvokeCommandAction Command="{Binding FindCommand, ElementName=Editor, UpdateSourceTrigger=PropertyChanged}"></b:InvokeCommandAction>
                                        </b:KeyTrigger>
                                    </b:Interaction.Triggers>
                                </TextBox>
                                <Button Grid.Column="1" Margin="{DynamicResource TabHeaderMargin}" Command="{Binding FindCommand, ElementName=Editor}" Content="Find" ></Button>
                                <CheckBox Grid.Column="2" VerticalAlignment="Center"   Margin="{DynamicResource TabHeaderMargin}" IsChecked="{Binding UseRegex, ElementName=Editor}">Use Regex</CheckBox>
                                <TextBox Grid.Row="0" VerticalContentAlignment="Center" Margin="{DynamicResource TabHeaderMargin}"   Grid.Column="3" Text="{Binding ReplaceText, Mode=TwoWay, ElementName=Editor, UpdateSourceTrigger=PropertyChanged}"></TextBox>
                                <Button Grid.Column="4"  Margin="{DynamicResource TabHeaderMargin}" Command="{Binding ReplaceCommand, ElementName=Editor}" Content="Replace"  ></Button>
                                <Button Grid.Column="5" Margin="{DynamicResource TabHeaderMargin}" Command="{Binding ClearCommand, ElementName=Editor}" Content="Clear"  ></Button>

                                <DataGrid CanUserAddRows="false"  ItemsSource="{Binding FindResults, ElementName=Editor}" Grid.Row="1" Grid.ColumnSpan="7" MaxHeight="300"
                                 AutoGenerateColumns="False" VerticalContentAlignment="Center"     SelectedItem="{Binding SelectedFindResult, Mode=TwoWay, ElementName=Editor}">
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Header="Line"  IsReadOnly="true"  Binding="{Binding LineNumber}" ></DataGridTextColumn>
                                        <DataGridTextColumn Header="Match" IsReadOnly="true"  Binding="{Binding Line}" ></DataGridTextColumn>
                                        <DataGridTextColumn Header="Replace" IsReadOnly="true" Binding="{Binding ReplacePreview}" ></DataGridTextColumn>
                                    </DataGrid.Columns>
                                </DataGrid>
                            </Grid>
                        </Border>
                    </Grid>
                </Border>
            </Grid>
        </DataTemplate>
        <DataTemplate DataType="{x:Type models:MDDocumentModel}">
            <Grid Height="{Binding ActualHeight, ElementName=Tabs}" Visibility="{Binding Visible}">
                <Border BorderThickness="3" CornerRadius="2">

                    <Border.Style>
                        <Style TargetType="Border">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsDirty}" Value="true">
                                    <DataTrigger.Setters>
                                        <Setter   Property="BorderBrush" Value="#FFAA0000">
                                        </Setter>

                                    </DataTrigger.Setters>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsDirty}" Value="false">
                                    <DataTrigger.Setters>
                                        <Setter   Property="BorderBrush" Value="Green">
                                        </Setter>

                                    </DataTrigger.Setters>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Border.Style>

                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                            <ColumnDefinition Width="*"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>

                            <RowDefinition Height="*"></RowDefinition>
                            <RowDefinition Height="5">
                            </RowDefinition>
                            <RowDefinition Height="50" ></RowDefinition>
                        </Grid.RowDefinitions>
                        <Image Source="{Binding Children[1].LineNumbers, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}}}" ></Image>
                        <localControls:MyTextBox Grid.Column="1" IsInactiveSelectionHighlightEnabled="True" AllowDrop="True"
                                             UndoLimit="100" ScrollViewer.VerticalScrollBarVisibility="Visible" ScrollViewer.HorizontalScrollBarVisibility="Visible"
                                           DataContext="{Binding}"   HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
Style="{DynamicResource TextBoxStyle1}" x:Name="Editor"
                                            SpellCheck.IsEnabled="{Binding DataContext.SpellCheck,  RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                                                CaretBrush="Green"
                           AcceptsReturn="True"  AcceptsTab="True"
                                                FindAllReferencesCommand="{Binding DataContext.FindAllReferencesCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                                                GotoDefinitionCommand="{Binding DataContext.GotoDefinitionCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"
                              FontFamily="Cascadia Code" FontSize="14">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="PreviewDrop">
                                    <b:CallMethodAction MethodName="TextDrop" TargetObject="{Binding DataContext,
                                       RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"></b:CallMethodAction>
                                </b:EventTrigger>
                                <b:EventTrigger EventName="PreviewDragOver">
                                    <b:CallMethodAction MethodName="TextDragOver" TargetObject="{Binding DataContext,
                                       RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"></b:CallMethodAction>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                            <localControls:MyTextBox.PopupControl>
                                <Popup>

                                    <Grid x:Name="AutoCompleteGrid">
                                        <Grid.RowDefinitions>

                                            <RowDefinition Height="Auto"></RowDefinition>
                                            <RowDefinition Height="Auto"></RowDefinition>
                                            <RowDefinition Height="Auto"></RowDefinition>
                                        </Grid.RowDefinitions>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                                        </Grid.ColumnDefinitions>

                                        <ListBox x:Name="AutoCompleteBox" Grid.Row="2" Grid.ColumnSpan="2"
                            MaxHeight="100"
                          ItemsSource="{Binding SortedMatchingAutoCompletes}">
                                            <ListBox.ItemTemplate>
                                                <DataTemplate>
                                                    <TextBlock Text="{Binding}"></TextBlock>
                                                </DataTemplate>
                                            </ListBox.ItemTemplate>
                                        </ListBox>
                                    </Grid>
                                </Popup>
                            </localControls:MyTextBox.PopupControl>
                        </localControls:MyTextBox>

                        <GridSplitter Grid.Row="1" Grid.Column="1" ShowsPreview="True" ResizeDirection="Rows"  HorizontalAlignment="Stretch"  ></GridSplitter>

                        <Border Grid.Row="2" Grid.Column="1" BorderThickness="1" BorderBrush="Black"
                               Width="{Binding Width, ElementName=Editor}">

                            <Grid Width="{Binding ActualWidth, ElementName=Editor}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="200" ></ColumnDefinition>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="200" ></ColumnDefinition>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="*"></ColumnDefinition>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"></RowDefinition>
                                    <RowDefinition></RowDefinition>
                                </Grid.RowDefinitions>


                                <TextBox Grid.Row="0" Margin="{DynamicResource TabHeaderMargin}" VerticalContentAlignment="Center"  Text="{Binding FindText, Mode=TwoWay, ElementName=Editor}">
                                    <b:Interaction.Triggers>
                                        <b:KeyTrigger Key="Return">
                                            <b:InvokeCommandAction Command="{Binding FindCommand, ElementName=Editor, UpdateSourceTrigger=PropertyChanged}"></b:InvokeCommandAction>
                                        </b:KeyTrigger>
                                    </b:Interaction.Triggers>
                                </TextBox>
                                <Button Grid.Column="1" Margin="{DynamicResource TabHeaderMargin}" Command="{Binding FindCommand, ElementName=Editor}" Content="Find" ></Button>
                                <CheckBox Grid.Column="2" VerticalAlignment="Center"   Margin="{DynamicResource TabHeaderMargin}" IsChecked="{Binding UseRegex, ElementName=Editor}">Use Regex</CheckBox>
                                <TextBox Grid.Row="0" VerticalContentAlignment="Center" Margin="{DynamicResource TabHeaderMargin}"   Grid.Column="3" Text="{Binding ReplaceText, Mode=TwoWay, ElementName=Editor, UpdateSourceTrigger=PropertyChanged}"></TextBox>
                                <Button Grid.Column="4"  Margin="{DynamicResource TabHeaderMargin}" Command="{Binding ReplaceCommand, ElementName=Editor}" Content="Replace"  ></Button>
                                <Button Grid.Column="5" Margin="{DynamicResource TabHeaderMargin}" Command="{Binding ClearCommand, ElementName=Editor}" Content="Clear"  ></Button>

                                <DataGrid CanUserAddRows="false"  ItemsSource="{Binding FindResults, ElementName=Editor}" Grid.Row="1" Grid.ColumnSpan="7" MaxHeight="300"
                                AutoGenerateColumns="False" VerticalContentAlignment="Center"     SelectedItem="{Binding SelectedFindResult, Mode=TwoWay, ElementName=Editor}">
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Header="Line"  IsReadOnly="true"  Binding="{Binding LineNumber}" ></DataGridTextColumn>
                                        <DataGridTextColumn Header="Match" IsReadOnly="true"  Binding="{Binding Line}" ></DataGridTextColumn>
                                        <DataGridTextColumn Header="Replace" IsReadOnly="true" Binding="{Binding ReplacePreview}" ></DataGridTextColumn>
                                    </DataGrid.Columns>
                                </DataGrid>
                            </Grid>
                        </Border>
                    </Grid>
                </Border>
            </Grid>
        </DataTemplate>
        <HierarchicalDataTemplate  DataType="{x:Type  models:TreeViewModel}" ItemsSource="{Binding Children}">

            <StackPanel Orientation="Horizontal">



                <Image Source="{Binding Icon}" Width="15" Margin="1,0,5,0">
                </Image>
                <TextBox x:Name="rename" Text="{Binding Rename, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <b:Interaction.Triggers>
                        <b:KeyTrigger Key="Return" ActiveOnFocus="True">

                            <b:InvokeCommandAction  Command="{Binding  DoRenameCommand}"></b:InvokeCommandAction>
                        </b:KeyTrigger>

                        <b:EventTrigger EventName="LostFocus">
                            <b:ChangePropertyAction TargetObject="{Binding}" PropertyName="IsRenaming" Value="false"></b:ChangePropertyAction>

                        </b:EventTrigger>
                        <b:KeyTrigger Key="Esc" ActiveOnFocus="True">
                            <b:ChangePropertyAction TargetObject="{Binding}" PropertyName="IsRenaming" Value="false"></b:ChangePropertyAction>
                        </b:KeyTrigger>
                    </b:Interaction.Triggers>
                </TextBox>

                <TextBlock x:Name="txt" Text="{Binding Name}" Width="Auto" FontWeight="Bold">
                </TextBlock>

            </StackPanel>

            <HierarchicalDataTemplate.Triggers>
                <DataTrigger Value="true">
                    <DataTrigger.Binding>
                        <Binding  Path="IsRenaming"></Binding>
                    </DataTrigger.Binding>
                    <DataTrigger.Setters>
                        <Setter Property="FocusManager.FocusedElement" TargetName="rename" Value="{Binding ElementName=rename}"></Setter>

                        <Setter Property="Visibility"  TargetName="rename" Value="Visible">
                        </Setter>
                        <Setter Property="Visibility"  TargetName="txt" Value="Collapsed">
                        </Setter>
                    </DataTrigger.Setters>
                </DataTrigger>
                <DataTrigger Value="false">
                    <DataTrigger.Binding>
                        <Binding  Path="IsRenaming"></Binding>
                    </DataTrigger.Binding>
                    <DataTrigger.Setters>

                        <Setter Property="Visibility"  TargetName="rename" Value="Collapsed">
                        </Setter>
                        <Setter Property="Visibility"  TargetName="txt" Value="Visible">
                        </Setter>
                    </DataTrigger.Setters>
                </DataTrigger>
            </HierarchicalDataTemplate.Triggers>
        </HierarchicalDataTemplate>
        <Thickness x:Key="TabHeaderMargin">2,2,2,2</Thickness>
        <local:TabHeaderDataTemplateSelector x:Key="TabHeaderSelector"></local:TabHeaderDataTemplateSelector>
        <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3" />
        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA" />
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5" />
        <Style x:Key="TextBoxStyle1" TargetType="{x:Type localControls:MyTextBox}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
            <Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
            <Setter Property="HorizontalContentAlignment" Value="Left" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}" />
            <Setter Property="AllowDrop" Value="true" />
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type localControls:MyTextBox}">

                        <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Visible" VerticalScrollBarVisibility="Visible" >


                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0.56" />
                            </Trigger>
                            <!--<Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}" />
                            </Trigger>-->
                            <Trigger Property="IsKeyboardFocused" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true" />
                        <Condition Property="IsSelectionActive" Value="false" />
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" SnapsToDevicePixels="true" StrokeThickness="1" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="ListBorder" Color="#828790" />
        <Style x:Key="TreeViewStyle1" TargetType="{x:Type TreeView}">
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
            <Setter Property="BorderBrush" Value="{StaticResource ListBorder}" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Padding" Value="1" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.PanningMode" Value="Both" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeView}">
                        <Border x:Name="Bd" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true">
                            <ScrollViewer x:Name="_tv_scrollviewer_" Background="{TemplateBinding Background}" CanContentScroll="false" Focusable="false" HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                                <ItemsPresenter />
                            </ScrollViewer>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                            </Trigger>
                            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                                <Setter Property="CanContentScroll" TargetName="_tv_scrollviewer_" Value="true" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                    <Setter Property="ItemsPanel">
                        <Setter.Value>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel />
                            </ItemsPanelTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF1CC4F7" />
        <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB" />
        <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z" />
        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False" />
            <Setter Property="Width" Value="16" />
            <Setter Property="Height" Value="16" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                            <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterY="3" CenterX="3" />
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterY="3" CenterX="3" />
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}" />
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}" />
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsMouseOver" Value="True" />
                                    <Condition Property="IsChecked" Value="True" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}" />
                                <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}" />
                            </MultiTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TreeViewItemFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style   TargetType="{x:Type TreeViewItem}">
            <Setter Property="HorizontalContentAlignment" Value="Left"></Setter>



            <Setter Property="Background" Value="Transparent" />
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="Padding" Value="1,0,0,0" />
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
            <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid Margin="-5,0,0,0">

                            <b:Interaction.Triggers>

                                <b:EventTrigger EventName="MouseMove">
                                    <b:CallMethodAction MethodName="TreeMouseMove" TargetObject="{Binding Path=DataContext,  RelativeSource={RelativeSource FindAncestor,
AncestorType={x:Type TreeView}}}"></b:CallMethodAction>
                                </b:EventTrigger>

                                <b:EventTrigger EventName="Drop">
                                    <b:CallMethodAction MethodName="TreeDrop" TargetObject="{Binding DataContext,
                                        RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"></b:CallMethodAction>
                                </b:EventTrigger>
                                <b:EventTrigger EventName="DragOver">
                                    <b:CallMethodAction MethodName="TreeDragOver" TargetObject="{Binding DataContext,
                                        RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}"></b:CallMethodAction>
                                </b:EventTrigger>


                                <b:EventTrigger EventName="MouseLeftButtonUp">
                                    <b:CallMethodAction MethodName="TreeItemClickedButtonUp" TargetObject="{Binding Path=DataContext,  RelativeSource={RelativeSource FindAncestor,
AncestorType={x:Type TreeView}}}"></b:CallMethodAction>
                                </b:EventTrigger>
                                <b:EventTrigger EventName="MouseLeftButtonDown">
                                    <b:CallMethodAction MethodName="TreeItemClickedButtonDown" TargetObject="{Binding Path=DataContext,  RelativeSource={RelativeSource FindAncestor,
AncestorType={x:Type TreeView}}}"></b:CallMethodAction>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}" />
                            <Border x:Name="Bd" CornerRadius="10" HorizontalAlignment="Stretch"  Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <ContentPresenter Margin="2,2,2,2" x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed" />
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Visibility" TargetName="Expander" Value="Hidden" />
                            </Trigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource CustomColor}" />
                                <Setter Property="Foreground" Value="White" />
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true" />
                                    <Condition Property="IsSelectionActive" Value="false" />
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}" />
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}" />
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsFile}" Value="false">
                    <Setter Property="ContextMenu" Value="{StaticResource FolderMenu}">
                    </Setter>
                    <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay, FallbackValue=False}"></Setter>
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition  Binding="{Binding IsFile}" Value="true"></Condition>
                        <Condition Binding="{Binding IsUML}" Value="true"></Condition>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter Property="ContextMenu" Value="{StaticResource FileMenuUML}">
                        </Setter>
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition  Binding="{Binding IsFile}" Value="true"></Condition>
                        <Condition Binding="{Binding IsUML}" Value="false"></Condition>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter Property="ContextMenu" Value="{StaticResource FileMenu}">
                        </Setter>
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>



                <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                    <Setter Property="ItemsPanel">
                        <Setter.Value>
                            <ItemsPanelTemplate>
                                <VirtualizingStackPanel />
                            </ItemsPanelTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF" />
        <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC" />
        <DataTemplate x:Key="TextDocumentTabHeader">

            <Border BorderThickness="2" Margin="2,2,2,0" CornerRadius="1" MinWidth="300">
                <Border.Style>
                    <Style TargetType="Border">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsDirty}" Value="true">
                                <DataTrigger.Setters>
                                    <Setter   Property="BorderBrush" Value="#FFAA0000">
                                    </Setter>
                                </DataTrigger.Setters>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsDirty}" Value="false">
                                <DataTrigger.Setters>
                                    <Setter   Property="BorderBrush" Value="Green">
                                    </Setter>
                                </DataTrigger.Setters>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Border.Style>
                <Grid IsHitTestVisible="True">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Visible}" Value="0">
                                    <Setter Property="Background"  Value="{DynamicResource CustomColor}"></Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>

                    <Grid.ColumnDefinitions>

                        <ColumnDefinition Width="Auto" ></ColumnDefinition>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                        <ColumnDefinition Width="Auto"></ColumnDefinition>
                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>

                    <Button ToolTip="Save"  Margin="{DynamicResource TabHeaderMargin}" Grid.Column="0" CommandParameter="{Binding}" Command="{Binding Path=DataContext.SaveCommand, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}">

                        <Button.Content>
                            <Grid>
                                <Image Source="/PlantUMLEditor;component/Images/Save_16x.png"></Image>
                            </Grid>
                        </Button.Content>
                    </Button>
                    <Button ToolTip="Save and Close"  Margin="{DynamicResource TabHeaderMargin}" Grid.Column="1" CommandParameter="{Binding}" Command="{Binding Path=DataContext.CloseDocumentAndSave, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}">
                        <Button.Content>
                            <Grid>
                                <Image Source="/PlantUMLEditor;component/Images/SaveClose_16x.png"></Image>
                            </Grid>
                        </Button.Content>
                    </Button>

                    <Button ToolTip="Close without saving"  Margin="{DynamicResource TabHeaderMargin}" Grid.Column="2" CommandParameter="{Binding}" Command="{Binding Path=DataContext.CloseDocument, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}">
                        <Button.Content>
                            <Grid>
                                <Image Source="/PlantUMLEditor;component/Images/Close_8x_16x.png" ></Image>
                            </Grid>
                        </Button.Content>
                    </Button>
                    <Button  ToolTip="Preview" Margin="{DynamicResource TabHeaderMargin}" Grid.Column="3" 
                                             Command="{Binding  ShowPreviewCommand}">

                        <Button.Content>
                            <Grid>
                                <Image Source="/PlantUMLEditor;component/Images/PreviewTransition_16x.png" ></Image>
                            </Grid>
                        </Button.Content>
                    </Button>
                    <Label 
                            Grid.Column="4" 
                           IsHitTestVisible="True"
                            FontWeight="ExtraBold"
                            VerticalAlignment="Center"  
                            Content="{Binding Title}"
                            Margin="{DynamicResource TabHeaderMargin}">
                        <b:Interaction.Triggers>

                            <b:EventTrigger EventName="MouseDown">
                                <b:InvokeCommandAction Command="{Binding DataContext.SelectDocumentCommand, ElementName=Tabs}" 
                            CommandParameter="{Binding}"/>

                            </b:EventTrigger>

                        </b:Interaction.Triggers>

                    </Label>
                </Grid>
            </Border>

        </DataTemplate>
        <DataTemplate x:Key="ImageDocumentTabHeader">

            <Border BorderThickness="2" Margin="2,2,2,0" CornerRadius="1" MinWidth="300"  BorderBrush="Black">

                <Grid IsHitTestVisible="True">
                    <Grid.Style>
                        <Style TargetType="Grid">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Visible}" Value="0">
                                    <Setter Property="Background"  Value="{DynamicResource CustomColor}"></Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Style>

                    <Grid.ColumnDefinitions>


                        <ColumnDefinition Width="Auto"></ColumnDefinition>

                        <ColumnDefinition Width="*"></ColumnDefinition>
                    </Grid.ColumnDefinitions>



                    <Button ToolTip="Close"
                            Margin="{DynamicResource TabHeaderMargin}" 
                            Grid.Column="0"
                            CommandParameter="{Binding}"
                            Command="{Binding Path=DataContext.CloseDocument, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ItemsControl}}}">
                        <Button.Content>
                            <Grid>
                                <Image Source="/PlantUMLEditor;component/Images/Close_8x_16x.png" ></Image>
                            </Grid>
                        </Button.Content>
                    </Button>

                    <Label 
                            Grid.Column="1" 
                           IsHitTestVisible="True"
                            FontWeight="ExtraBold"
                            VerticalAlignment="Center"  
                            Content="{Binding Title}"
                            Margin="{DynamicResource TabHeaderMargin}">
                        <b:Interaction.Triggers>

                            <b:EventTrigger EventName="MouseDown">
                                <b:InvokeCommandAction Command="{Binding DataContext.SelectDocumentCommand, ElementName=Tabs}" 
                            CommandParameter="{Binding}"/>

                            </b:EventTrigger>

                        </b:Interaction.Triggers>

                    </Label>
                </Grid>
            </Border>

        </DataTemplate>
    </Window.Resources>


    <Grid  >
        <Grid.ColumnDefinitions>
            <ColumnDefinition  Width="{Binding UIModel.GridSettings.TreeWidth, Mode=TwoWay}" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <ToolBar    Grid.ColumnSpan="3">

            <Button   Command="{Binding OpenDirectoryCommand}"  ToolTip="Open Directory">
                <Image Source="/PlantUMLEditor;component/Images/OpenFolder_16x.png"></Image>
            </Button>
            <Separator />
            <Button    Command="{Binding SaveAllCommand}"  ToolTip="Save All">
                <Image Source="/PlantUMLEditor;component/Images/SaveAll_16x.png"></Image>
            </Button>


            <Separator></Separator>
            <ComboBox ItemsSource="{Binding MRUFolders}" MinWidth="100" SelectedItem="{Binding SelectedMRUFolder}">
                <ComboBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ComboBoxItem}">
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    </Style>
                </ComboBox.ItemContainerStyle>
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                                <ColumnDefinition Width="25"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <TextBlock Text="{Binding}" VerticalAlignment="Center" Margin="0,0,20,0"></TextBlock>
                            <Button Grid.Column="1" Margin="1" Command="{Binding  Path=DataContext.DeleteMRUCommand,  RelativeSource={RelativeSource FindAncestor,
AncestorType={x:Type Window}}}" CommandParameter="{Binding}" FontFamily="Consolas">
                                <Button.Content>X</Button.Content>
                            </Button>
                        </Grid>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>

            <Menu HorizontalAlignment="Center" VerticalAlignment="Center">
                <MenuItem Header="Tools"  Margin="0,0,0,0" FontFamily="Consolas Code">
                    <MenuItem Header="Settings">


                        <MenuItem Header="App Settings" Command="{Binding OpenSettingsCommand}"></MenuItem>
                        <MenuItem Header="UML Color Config" Command="{Binding OpenUMLColorConfigCommand}"></MenuItem>
                        <MenuItem Header="Markdown Color Config" Command="{Binding OpenMDColorConfigCommand}"></MenuItem>

                        <Separator>
                            
                        </Separator>
                        <MenuItem Header="Edit Templates" Command="{Binding EditTemplatesCommand}"/>



                    </MenuItem>

                    <MenuItem Header="Scan Directory" Command="{Binding ScanAllFiles}"></MenuItem>
                    <MenuItem Header="Open Terminal" Command="{Binding OpenTerminalCommand}"></MenuItem>

                    <MenuItem Header="Open Explorer" Command="{Binding OpenExplorerCommand}"></MenuItem>

                    <MenuItem Header="Run DOCFx Serve" Command="{Binding DocFXServeCommand}"></MenuItem>

                    <MenuItem Header="Quick GIT Commit and Sync" Command="{Binding GitCommitAndSyncCommand}"></MenuItem>

                </MenuItem>
            </Menu>

            <Separator></Separator>
            <CheckBox IsChecked="{Binding SpellCheck}">Activate Spell Check</CheckBox>
            <Separator></Separator>
            <Button Content="Help" Command="{Binding OpenHelpCommand}" />
            <Separator></Separator>
            <Label Content="Templates:" HorizontalAlignment="Center"  VerticalAlignment="Center"></Label>
            <ComboBox MinWidth="100" SelectedItem="{Binding SelectedTemplate}" IsEnabled="{Binding TemplatesEnabled}" >
                <ComboBox.Resources>
                    <DataTemplate DataType="{x:Type models:TemplateItem}">
                        <TextBlock Text="{Binding Name}"></TextBlock>
                    </DataTemplate>
                    <DataTemplate DataType="System:String">
                        <TextBlock Text="{Binding}"></TextBlock>
                    </DataTemplate>
                    <CollectionViewSource x:Key="ItemsSource" Source="{Binding TemplateStorage.Templates}" />

                </ComboBox.Resources>
        
                <ComboBox.ItemsSource>
                    <CompositeCollection>
                     
                        <CollectionContainer Collection="{Binding Source={StaticResource ItemsSource}}" />

                    </CompositeCollection>
                </ComboBox.ItemsSource>
            </ComboBox>

            <Button Command="{Binding ApplyTemplateCommand}" Content="Apply Template"></Button>
            <Separator/>
            <Label HorizontalAlignment="Center"  VerticalAlignment="Center" Content="Zoom"></Label>

            <Slider VerticalAlignment="Center" Width="100" Value="{Binding EditorFontSize, UpdateSourceTrigger=PropertyChanged, FallbackValue=14}" Minimum="4" Maximum="32" ></Slider>
        </ToolBar>
        <Grid Grid.Row="1">
            <Grid.RowDefinitions>
                <RowDefinition Height="*">
                </RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition Height="{Binding UIModel.GridSettings.DataTypesHeight, Mode=TwoWay}"></RowDefinition>
            </Grid.RowDefinitions>
            <TreeView Style="{DynamicResource TreeViewStyle1}"  AllowDrop="True"
                        VirtualizingStackPanel.IsVirtualizing="True"
            VirtualizingStackPanel.VirtualizationMode="Recycling"
                      Grid.Row="0" Grid.RowSpan="1"  ItemsSource="{Binding Folder.Children}">

            </TreeView>
            <GridSplitter Grid.Row="1" Height="5" ShowsPreview="True" HorizontalAlignment="Stretch" ></GridSplitter>
            <ListView Grid.Row="2"  ItemsSource="{Binding DataTypes}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="SelectionChanged">
                        <b:CallMethodAction MethodName="GotoDataType" TargetObject="{Binding Path=DataContext,  RelativeSource={RelativeSource FindAncestor,
AncestorType={x:Type ListBox}}}"></b:CallMethodAction>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                <ListView.View>
                    <GridView>
                        <GridView.Columns>
                            <GridViewColumn Width="100" Header="Namespace" DisplayMemberBinding="{Binding DataType.Namespace}"></GridViewColumn>
                            <GridViewColumn Width="Auto" Header="Type" DisplayMemberBinding="{Binding DataType.Name}"></GridViewColumn>
                        </GridView.Columns>
                    </GridView>
                </ListView.View>
            </ListView>
        </Grid>

        <GridSplitter     HorizontalAlignment="Center" 
              VerticalAlignment="Stretch" Grid.Row="1" Grid.Column="1" ShowsPreview="True" Width="5" />
        <Grid Grid.Row="1" Grid.Column="2">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="Auto"></RowDefinition>
                <RowDefinition   Height="{Binding UIModel.GridSettings.DocumentsWell, Mode=TwoWay}"></RowDefinition>
            </Grid.RowDefinitions>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="*"></RowDefinition>
                </Grid.RowDefinitions>

                <ItemsControl ItemsSource="{Binding OpenDocuments}" ItemTemplateSelector="{StaticResource TabHeaderSelector}">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>

                </ItemsControl>

                <ItemsControl Grid.Row="1" x:Name="Tabs"
                          ItemsSource="{Binding OpenDocuments}"
                          >
                </ItemsControl>
            </Grid>
            <GridSplitter Grid.Row="1" ShowsPreview="True"  Height="5" ResizeDirection="Rows" HorizontalAlignment="Stretch"></GridSplitter>
            <TabControl Grid.Row="2" SelectedIndex="{Binding SelectedToolTab, Mode=TwoWay}">
                <TabItem >
                
                    <TabItem.Style>
                        <Style TargetType="TabItem">

                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Messages.Count}" Value="0">
                                    <Setter Property="Foreground" Value="Green">
                                    </Setter>
                                </DataTrigger>
                            </Style.Triggers>
                            <Style.Setters>
                                <Setter Property="Foreground" Value="Red">
                                </Setter>
                            </Style.Setters>
                        </Style>
                    </TabItem.Style>
                    <TabItem.Header>Errors</TabItem.Header>
                    <DataGrid SelectionMode="Single" IsReadOnly="True"
                              Grid.Row="2"
                              AutoGenerateColumns="False"  ItemsSource="{Binding Messages}" Margin="{DynamicResource TabHeaderMargin}"  
                           HorizontalContentAlignment="Stretch"
                              
                                 SelectedItem="{Binding SelectedMessage}">
                        <DataGrid.Resources>
                            <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Cyan"/>
                        </DataGrid.Resources>
                        <DataGrid.Columns>
                            <DataGridTemplateColumn>
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <Button x:Name="createMissingMethod" Command="{Binding FixingCommand}" Margin="10,5,10,5" CommandParameter="{Binding}"
                                Content="Fix" Grid.Column="2"></Button>
                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{Binding IsFixable}" Value="false">
                                                <DataTrigger.Setters>
                                                    <Setter TargetName="createMissingMethod" Property="Visibility" Value="Collapsed"></Setter>
                                                </DataTrigger.Setters>
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="Text"  IsReadOnly="true"  >
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock VerticalAlignment="Center"  Text="{Binding Text}"></TextBlock>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>
                            <DataGridTemplateColumn Header="Line"  IsReadOnly="true"  >
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock VerticalAlignment="Center"  Text="{Binding LineNumber}"></TextBlock>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>

                            <DataGridTemplateColumn Header="File"  IsReadOnly="true"  >
                                <DataGridTemplateColumn.CellTemplate>
                                    <DataTemplate>
                                        <TextBlock VerticalAlignment="Center"  Text="{Binding RelativeFileName}"></TextBlock>
                                    </DataTemplate>
                                </DataGridTemplateColumn.CellTemplate>
                            </DataGridTemplateColumn>

                        </DataGrid.Columns>
                    </DataGrid>
                </TabItem>
                <TabItem>
                    <TabItem.Header>Find In Files</TabItem.Header>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition></ColumnDefinition>
                            <ColumnDefinition Width="100"></ColumnDefinition>
                            <ColumnDefinition Width="*"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"></RowDefinition>
                            <RowDefinition Height="*"></RowDefinition>
                        </Grid.RowDefinitions>
                        <TextBox Margin="2,2,5,2"  x:Name="txtGF">
                            <b:Interaction.Triggers>
                                <b:KeyTrigger Key="Return" ActiveOnFocus="True">

                                    <b:InvokeCommandAction   CommandParameter="{Binding Text, ElementName=txtGF}"  Command="{Binding  GlobalSearchCommand}"></b:InvokeCommandAction>
                                </b:KeyTrigger>
                            </b:Interaction.Triggers>
                        </TextBox>

                        <Button Margin="2,2,2,2"  Grid.Column="1" Command="{Binding GlobalSearchCommand}"
                                CommandParameter="{Binding Text, ElementName=txtGF}" >Find</Button>
                        <DataGrid SelectionMode="Single"  AutoGenerateColumns="False" 
                                  ItemsSource="{Binding GlobalFindResults}" 
                                  Margin="{DynamicResource TabHeaderMargin}"
                                  Grid.Row="1" Grid.ColumnSpan="3" HorizontalContentAlignment="Stretch"
                                 SelectedItem="{Binding SelectedGlobalFindResult}">
                            <DataGrid.Resources>
                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Cyan"/>
                            </DataGrid.Resources>
                            <DataGrid.Columns>
                                <DataGridTextColumn IsReadOnly="true" Header="File" Binding="{Binding FileName}"></DataGridTextColumn>
                                <DataGridTextColumn IsReadOnly="true" Header="LineNumber" Binding="{Binding LineNumber}"></DataGridTextColumn>
                                <DataGridTextColumn IsReadOnly="true" Header="Text" Binding="{Binding Text}"></DataGridTextColumn>
                            </DataGrid.Columns>
                        </DataGrid>
                    </Grid>
                </TabItem>
                <TabItem>
                    <TabItem.Header>Find References</TabItem.Header>
                    <Grid>
                        <DataGrid SelectionMode="Single"  AutoGenerateColumns="False" 
                                  ItemsSource="{Binding FindReferenceResults}" 
                                  Margin="{DynamicResource TabHeaderMargin}"
                                  Grid.Row="1" Grid.ColumnSpan="3" HorizontalContentAlignment="Stretch"
                                 SelectedItem="{Binding SelectedGlobalFindResult}">
                            <DataGrid.Resources>
                                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="Cyan"/>
                            </DataGrid.Resources>
                            <DataGrid.Columns>
                                <DataGridTextColumn IsReadOnly="true" Header="Text" Binding="{Binding Text}"></DataGridTextColumn>
                                <DataGridTextColumn IsReadOnly="true" Header="LineNumber" Binding="{Binding LineNumber}"></DataGridTextColumn>

                                <DataGridTextColumn IsReadOnly="true" Header="File" Binding="{Binding FileName}"></DataGridTextColumn>

                            </DataGrid.Columns>
                        </DataGrid>
                    </Grid>
                </TabItem>
                <TabItem>
                    <TabItem.Header>
                        GIT
                    </TabItem.Header>
                    <Grid>

                        <TextBox Grid.Row="1" Text="{Binding GitMessages}"></TextBox>
                    </Grid>
                </TabItem>
            </TabControl>
        </Grid>

        <StatusBar Grid.Row="2" Grid.ColumnSpan="3">
            <StatusBarItem>
                <Button Command="{Binding CancelExecutingAction}">Cancel</Button>
            </StatusBarItem>
            <StatusBarItem>
                <TextBlock Text="{Binding CurrentActionExecuting}"></TextBlock>
            </StatusBarItem>
        </StatusBar>

        <Popup IsOpen="{Binding ConfirmOpen}" AllowsTransparency="True" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center"   Placement="Center"  >
            <Grid Margin="10,10,10,10">



                <Border BorderThickness="2" CornerRadius="10" BorderBrush="Black" Background="White">
                    <Border.Effect>
                        <DropShadowEffect Direction="315"  ShadowDepth="10" BlurRadius="10"  Opacity="0.5" />
                    </Border.Effect>
                    <Grid Margin="10,10,10,10">
                        <Grid.RowDefinitions>
                            <RowDefinition></RowDefinition>
                            <RowDefinition></RowDefinition>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition></ColumnDefinition>
                            <ColumnDefinition></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.ColumnSpan="2" Background="White" Margin="5,5,5,5">You have unsaved changes. Continue closing?</TextBlock>
                        <Button Grid.Row="1" Margin="5,5,5,5">
                            <Button.Content>Yes</Button.Content>

                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click">

                                    <b:ChangePropertyAction TargetObject="{Binding}" PropertyName="AllowContinueClosing" Value="true"></b:ChangePropertyAction>
                                    <b:ChangePropertyAction TargetObject="{Binding}" PropertyName="ConfirmOpen" Value="false"></b:ChangePropertyAction>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </Button>
                        <Button Grid.Row="1" Grid.Column="1" Margin="5,5,5,5">
                            <Button.Content>No</Button.Content>

                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click">

                                    <b:ChangePropertyAction TargetObject="{Binding}" PropertyName="AllowContinueClosing" Value="false"></b:ChangePropertyAction>
                                    <b:ChangePropertyAction TargetObject="{Binding}" PropertyName="ConfirmOpen" Value="false"></b:ChangePropertyAction>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </Button>
                    </Grid>
                </Border>
            </Grid>

        </Popup>
    </Grid>
</Window>