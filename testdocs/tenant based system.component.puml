@startuml

title tenant based system.component

queue "Director or Service Bus" as Director
component "UI / Web" as UI
component ProxyLayer {
    component Proxy
    component TenantServiceConnectionFactory
    interface ITenantHttpFactory
    database Redis
}

package Tenant1 {
    component Tenant1PluginLogic
    database Tenant1Data
    database Tenant1Ms3Data
}

package "Tenant2" as t2 {
    component Tenant2PluginLogic
    database Tenant2Data
    component Tenant2MS2
    database Tenant2SharedData2
}

package ExistingSystem {
    component ExistingService
    database ExistingData
    component EventEmitterPlugin
}

package MS1 {
    component Service1
    interface IService1Shared
    database SharedData1
    component DataConnectionFactory as dcf1
    interface ITenantDataConnection as td1
    database "Redis" as ms1r
    interface IService1Plugin
}

package MS2 {
    database SharedData2
    interface IService2Shared
    component Service2
    component DataConnectionFactory as dcf2
    interface ITenantDataConnection as td2
    database "Redis" as ms2r
}

package MS3 {
    database SharedData3
    interface IService3Shared
    component Service3
    component DataConnectionFactory as dcf3
    interface ITenantDataConnection as td3
    database "Redis" as ms3r
}

interface IEventEmitterPlugin
interface CDC
component EventEmitter
UI -down- IService3Shared : Performance critical direct connection to micro service

note top of MS3
this can be something like search service that
can be directly called via the web layer for performance reasons
end note

note top of Tenant1: simple tenant with data in specific region

note bottom of t2: extreme example where logic is drastically different than MS2

Service3 -up-o IService3Shared
Proxy -- Redis : Cache
EventEmitterPlugin --( IEventEmitterPlugin
EventEmitter -up-o IEventEmitterPlugin : plugin creates events from data changes
ExistingData --down-o CDC
EventEmitter -up-( CDC
EventEmitter -down---> Director : Data Changed Events
Proxy <--up-> ExistingService
Director <----> Tenant2MS2 : Commands, Events with Tenant Filter
Tenant2MS2 -- Tenant2SharedData2
Tenant2MS2 --( IService2Shared
UI -- Proxy
Service1 -- SharedData1
Service2 -- SharedData2
Proxy --( IService1Shared : REST
Proxy --( IService2Shared : REST
Service1 -up-o IService1Shared : Shared CEQ / Data models
Service2 -up-o IService2Shared : Shared CEQ / Data models
Service1 --o IService1Plugin
Tenant2PluginLogic -up-( IService1Plugin : small custom logic per tenant, in process dll
Tenant1PluginLogic -up-( IService1Plugin : small custom logic per tenant, in process dll
Service1 --( td1 : lookup connection based on tenant
Service2 --( td2 : lookup connection based on tenant
dcf1 -up-o td1
dcf2 -up-o td2
dcf3 -up-o td3
Service3 --( td3
Service3 -- SharedData3
Tenant1Data -up- Service1 : Data store for tenant 1
Tenant2Data -up- Service1 : Data store for tenant 2
Tenant1Ms3Data --up-- Service3
Service2 -- ms2r
Service1 -- ms1r
Service3 -- ms3r
Service3 <--> Director : Command, Events
Service1 <-right-> Director : Commands, Events
Service2 <-left-> Director : Commands, Events
TenantServiceConnectionFactory --o ITenantHttpFactory
Proxy -up-( ITenantHttpFactory : creates HttpClient configured to talk to service based on tenant or default
@enduml
